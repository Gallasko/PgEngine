import "nexus"
import "achievement"
import "log"

var button = NexusButton()

button.id = "Test"
button.label = "Test"

button.conditions = [FactChecker("mana", 25, "GreaterEqual")]
button.outcome = [AchievementRewardEvent("gamelog", "message", "Mana threshold reached!")]

registerNexusButton(button)

//
//var gen = createGenerator("gold_gen", "gold", 0, 1, 5)
//
//var button = NexusButton()
//
//button.id = "GoldHarvest"
//button.label = "Harvest [Gold]"
//
//button.conditions = [FactChecker("mana", 25, "GreaterEqual")]
//button.outcome = [AchievementRewardEvent("res_harvest", "id", gen)]
//button.nbClickBeforeArchive = 0
//
//debugLog(gen)
//
//registerNexusButton(button)
//


var button = NexusButton()

button.id = "TouchAltar"
button.label = "Touch Altar"

button.conditions = [FactChecker("altar_touched", false, "Equal"), FactChecker("startTuto", true, "Equal")]
button.outcome =
    [ AchievementRewardEvent("gamelog", "message", "Altar is coming back to life...")
    , AddFact("altar_touched", true) ]

button.description = "A pretty dusty altar..."

registerNexusButton(button)


var button = NexusButton()

button.id = "FalseBasicHarvest"
button.label = "Harvest Altar"
button.category = "Harvest"

button.conditions = [FactChecker("altar_touched", true, "Equal")]
button.outcome =
    [ AchievementRewardEvent("add_res_display", "res", "mana")
    , AchievementRewardEvent("add_generator", "id", "altar", "res", "mana", "prod", 5.0, "storage", 20.0)
    , AddFact("mana_max_value", 20.0)
    , AddFact("false_harvest_clicked", true) ]

button.description = "Harvest the mana stored in the altar"
button.nbClickBeforeArchive = 1

registerNexusButton(button)


var button = NexusButton()

button.id = "BasicHarvest"
button.label = "Harvest Altar"
button.category = "Harvest"

button.conditions = [FactChecker("false_harvest_clicked", true, "Equal")]
button.outcome =
    [ AchievementRewardEvent("res_harvest", "id", "altar")
    , AchievementRewardEvent("one_shot_res", "res", "mana", "value", 0.5) ]

button.description = "Harvest the mana stored in the altar"
button.nbClickBeforeArchive = 0

registerNexusButton(button)


var button = NexusButton()

button.id = "PowerOnScrapper"
button.label = "Touch Black Box"

button.conditions = [FactChecker("altar_touched", true, "Equal")]
button.outcome =
    [ AchievementRewardEvent("gamelog", "message", "Black box is turning on! Weird scraps comes out of it...")
    , AddFact("scrapper_on", true)
    , AchievementRewardEvent("add_res_display", "res", "scrap")
    , AchievementRewardEvent("one_shot_res", "res", "scrap", "value", 1)
    , AddFact("scrap_max_value", 5.0)]

button.description = "A weird black box near the altar, it should be useful..."
button.costs = [ ButtonCost("mana", 10) ]

registerNexusButton(button)


var button = NexusButton()

button.id = "ScrapBox"
button.label = "Scrap box"

button.conditions = [FactChecker("storage_1_learned", true, "Equal")]
button.outcome =
    [ IncreaseFact("scrap_max_value", 5.0)]

button.description = "Use some scrap and forge them into a scrap box using some mana.\nThis should help to hold more of those pesky scraps"
button.costs = [ ButtonCost("mana", 5), ButtonCost("scrap", 3) ]
button.costIncrease = [1.3, 1.3]
button.nbClickBeforeArchive = 0

registerNexusButton(button)


var button = NexusButton()

button.id = "BasicReadingTools"
button.label = "Reading Tools"

button.conditions = [FactChecker("total_scrap", 1, "GreaterEqual")]
button.outcome =
    [ AchievementRewardEvent("gamelog", "message", "Books around you start to make some sense.")
    , AddFact("basic_reading_tools", true)
    , AddFact("knowledge_max_value", 10)
    , AddFact("knowledge_per_completion", 0.5)
    , AchievementRewardEvent("add_res_display", "res", "knowledge") ]

button.description = "A weird black box near the altar, it should be useful..."
button.costs = [ ButtonCost("mana", 10), ButtonCost("scrap", 5), ButtonCost("mana", 1) ]

registerNexusButton(button)


var scrapConverter = Converter("scrap_converter")

scrapConverter.input = ["mana"]
scrapConverter.output = ["scrap"]
scrapConverter.cost = [5.0]
scrapConverter.yield = [1.0]

var scrapConverterId = registerConverter(scrapConverter)


// Todo use that back (right now it doesn't work as we can overcap on resources)
//var button = NexusButton()
//
//button.id = "ScrapConverter"
//button.label = "Convert [Scrap]"
//button.category = "Task"
//
//button.conditions = [FactChecker("scrapper_on", true, "Equal")]
//button.outcome = [ AchievementRewardEvent("converter_triggered", "id", scrapConverterId) ]
//
//button.description = "Convert Mana to Scrap"
//button.costs = [ ButtonCost("mana", 0, "scrap_converter_mana_cost", false) ]
//button.nbClickBeforeArchive = 0
//
//registerNexusButton(button)

var button = NexusButton()

button.id = "ScrapConverter"
button.label = "Convert [Scrap]"
button.category = "Task"

button.conditions = [req(scrapper_on)]
button.outcome = [ AchievementRewardEvent("one_shot_res", "res", "scrap", "value", 1) ]

button.description = "Convert Mana to Scrap"
button.costs = [ ButtonCost("mana", 0, "scrap_converter_mana_cost", true) ]
button.nbClickBeforeArchive = 0

registerNexusButton(button)


var button = NexusButton()

button.id = "KnowledgeFocus"
button.label = "Read books"
button.category = "Knowledge"

button.conditions = [FactChecker("basic_reading_tools", true, "Equal")]
button.outcome = [ AchievementRewardEvent("one_shot_res", "res", "knowledge", "valueId", "knowledge_per_completion") ]

button.description = "Read books to gain some knowledge about this place"
button.nbClickBeforeArchive = 0
button.activable = true
button.activationTime = 500.0

registerNexusButton(button)


var button = NexusButton()

button.id = "LearnRuneCarving"
button.label = "Learn Runes"
button.category = "Knowledge"


button.conditions = [FactChecker("total_knowledge", 1, "GreaterEqual")]
button.outcome =
    [ AddFact("carving_runes_learned", true)
    , AchievementRewardEvent("add_res_display", "res", "rune") ]

button.costs = [ ButtonCost("knowledge", 5) ]

button.description = "Learn how to carve some magical runes"
button.nbClickBeforeArchive = 1

registerNexusButton(button)


var button = NexusButton()

button.id = "CarvingRunes"
button.label = "Carve Rune"
button.category = "Task"

button.conditions = [FactChecker("carving_runes_learned", true, "Equal")]
button.outcome = [ AchievementRewardEvent("one_shot_res", "res", "rune", "value", 1) ]

button.costs = [ ButtonCost("scrap", 3), ButtonCost("mana", 5) ]

button.description = "Take your time to mold and carve some scrap into a magical rune"
button.nbClickBeforeArchive = 0
button.activable = true
button.activationTime = 2000.0

registerNexusButton(button)


var button = NexusButton()

button.id = "UpgradeAltarSpeed1"
button.label = "Upgrade Altar"
button.category = "Main"

button.conditions = [FactChecker("carving_runes_learned", true, "Equal")]
button.outcome =
    [ AchievementRewardEvent("res_gen_upgrade", "id", "altar", "upgradeAmount", 1)
    , IncreaseFact("mana_max_value", 20)
    , AddFact("first_altar_upgrade", true) ]

button.costs = [ ButtonCost("rune", 5), ButtonCost("mana", 20) ]

button.description = "Upgrade Mana generation (+1 mana/sec) and increase mana storage by 20"
button.nbClickBeforeArchive = 1
button.activable = true
button.activationTime = 2000.0

registerNexusButton(button)


var button = NexusButton()

button.id = "LearnScrollWriting"
button.label = "Learn Scroll"
button.category = "Knowledge"

button.conditions = [FactChecker("total_knowledge", 1, "GreaterEqual")]
button.outcome =
    [ AddFact("writing_scrolls_learned", true)
    , AchievementRewardEvent("add_res_display", "res", "scroll") ]

button.costs = [ ButtonCost("knowledge", 5) ]

button.description = "Learn how to create some magical scroll"
button.nbClickBeforeArchive = 1

registerNexusButton(button)


var button = NexusButton()

button.id = "CreateScroll"
button.label = "Create Scroll"
button.category = "Task"

button.conditions = [FactChecker("writing_scrolls_learned", true, "Equal")]
button.outcome = [ AchievementRewardEvent("one_shot_res", "res", "scroll", "value", 1) ]

button.costs = [ ButtonCost("scrap", 1), ButtonCost("mana", 10) ]

button.description = "By pouring decent amount of mana in some scrap, you can manage to create some scroll to write some off your newly acquired knowledge"
button.nbClickBeforeArchive = 0

registerNexusButton(button)


var button = NexusButton()

button.id = "TakeSomeNotes"
button.label = "Write Notes"
button.category = "Knowledge"

button.conditions =
    [ FactChecker("writing_scrolls_learned", true, "Equal")
    , FactChecker("first_knowledge_cap", true, "Equal") ]

button.outcome = [ IncreaseFact("knowledge_max_value", 20), IncreaseFact("note_taken", 1) ]

button.costs = [ ButtonCost("knowledge", 5), ButtonCost("scroll", 1) ]
button.costIncrease = [1.5, 1.2]

button.description = "Take some notes about your new found knowledge, to further increase the knowledge that you can understand.\n(Knowledge cap +20)"
button.nbClickBeforeArchive = 0

registerNexusButton(button)


var button = NexusButton()

button.id = "SpeedReading1"
button.label = "Speed Reading"
button.category = "Knowledge"

button.conditions =
    [ FactChecker("writing_scrolls_learned", true, "Equal")
    , FactChecker("first_knowledge_cap", true, "Equal") ]

button.outcome = [ IncreaseFact("knowledge_per_completion", 0.5) ]

button.costs = [ ButtonCost("knowledge", 20) ]

button.description = "Increase the speed at which you read your books\n(Knowledge per second +1)"
button.nbClickBeforeArchive = 1

registerNexusButton(button)


var button = NexusButton()

button.id = "Storage1"
button.label = "Storage"
button.category = "Knowledge"

button.conditions = [ FactChecker("writing_scrolls_learned", true, "Equal") ]

button.outcome = [ AddFact("storage_1_learned", true) ]

button.costs = [ ButtonCost("knowledge", 15) ]

button.description = "Research some ways to use our spare scrap to build some storage"

registerNexusButton(button)


var button = NexusButton()

button.id = "Storage2"
button.label = "Magic Storage"
button.category = "Knowledge"

button.conditions = [ FactChecker("storage_1_learned", true, "Equal") ]

button.outcome = [ AddFact("storage_2_learned", true) ]

button.costs = [ ButtonCost("knowledge", 35) ]

button.description = "Scrap box cannot hold any magical items like runes and scroll, we need to find a better way to store our materials..."

registerNexusButton(button)


var button = NexusButton()

button.id = "Crate"
button.label = "Crate"

button.conditions = [FactChecker("storage_2_learned", true, "Equal")]
button.outcome =
    [ IncreaseFact("rune_max_value", 5.0)
    , IncreaseFact("scroll_max_value", 5.0) ]

button.description = "Use lot of scraps reinforced with some rune and forge them into a more durable crate using some mana.\nThis should help store our magical mats without them losing their magical attributes"
button.costs = [ ButtonCost("mana", 30), ButtonCost("scrap", 20), ButtonCost("rune", 2) ]
button.costIncrease = [1.3, 1.3, 1.3]
button.nbClickBeforeArchive = 0

registerNexusButton(button)


var button = NexusButton()

button.id = "Meditation1"
button.label = "Meditation"
button.category = "Knowledge"

button.conditions = [ FactChecker("note_taken", 1, "GreaterEqual") ]

button.outcome = [ IncreaseFact("learn_meditation_1", true) ]

button.costs = [ ButtonCost("knowledge", 25) ]

button.description = "Understand some meditation technique that could be useful to store more mana in your body."
button.nbClickBeforeArchive = 1

registerNexusButton(button)



var button = NexusButton()

button.id = "MeditationActive1"
button.label = "Meditation"
button.category = "Storage"

button.conditions = [ FactChecker("learn_meditation_1", true, "Equal") ]

button.outcome = [ IncreaseFact("mana_max_value", 10), IncreaseFact("basic_meditation_done", 1) ]

button.costs = [ ]

button.description = "Take some time to harness the ambiant mana.\n(Mana cap +10)"
button.nbClickBeforeArchive = 5
button.activable = true
button.activationTime = 30000.0

registerNexusButton(button)



var button = NexusButton()

button.id = "AutoAltarFarming"
button.label = "Altar Collection"
button.category = "Knowledge"

button.conditions = [ FactChecker("note_taken", 3, "GreaterEqual") ]

button.outcome = [ AddFact("auto_altar_collection_researched", true) ]

button.costs = [ ButtonCost("knowledge", 65) ]

button.description = "Research a way to harvest the mana stored in the altar automatically"

registerNexusButton(button)


var button = NexusButton()

button.id = "ManaReserveKnowledge1"
button.label = "Mana Reserve"
button.category = "Knowledge"

button.conditions = [ FactChecker("note_taken", 3, "GreaterEqual") ]

button.outcome = [ AddFact("mana_reservoir_1_researched", true) ]

button.costs = [ ButtonCost("knowledge", 65) ]

button.description = "Research a way to increase your own mana reserve."

registerNexusButton(button)


var button = NexusButton()

button.id = "ManaReserveUpgrade1"
button.label = "Mana Reservoir"
button.category = "Storage"

button.conditions = [ FactChecker("mana_reservoir_1_researched", True, "Equal") ]

button.outcome = [ AddFact("mana_reservoir_1_researched", true) ]

button.costs = [ ButtonCost("knowledge", 65) ]
button.costIncrease = [1.3]

button.description = "Attune some runes with your body to increase your mana reserve."
button.nbClickBeforeArchive = 0

registerNexusButton(button)


var button = NexusButton()

button.id = "Scribe"
button.label = "Scribe"
button.category = "Specialization"

button.conditions =
    [ FactChecker("writing_scrolls_learned", true, "Equal")
    , FactChecker("first_knowledge_cap", true, "Equal")
    , FactChecker("mage_tier", 0, "Equal") ]

button.outcome =
    [ IncreaseFact("knowledge_max_value", 100)
    , IncreaseFact("mana_max_value", 50)
    , AddFact("mage_tier", 1) ]

button.costs = [ ButtonCost("knowledge", 50), ButtonCost("scroll", 10), ButtonCost("mana", 100) ]

button.description = "Specialize yourself in the creation of magical scroll.\nA major \c{255, 0, 0, 255}step\c{} in the mage process (Mutually exclusive with other spcialization !)\nKnowledge cap +100\nMana cap +50"
button.nbClickBeforeArchive = 1

registerNexusButton(button)


// ========================================
// NEW SIMPLIFIED SYNTAX EXAMPLES
// ========================================

// Simple one-time button (replaces 7 lines with 1!)
quickButton("TestQuick", "Quick Test", [req("mana>=50")], [gamelog("Quick button works!")], "A test button using the new simplified syntax")

// Resource conversion button with category
quickButton("QuickScrapConvert", "Quick Convert",
    [req("scrapper_on")],
    [resource("scrap", 2)],
    "Quickly convert mana to scrap", "Task", 0);  // 0 = repeatable

// Complex requirements with multiple conditions
quickButton("QuickComplexTest", "Complex Test",
    [req("!complex_test_done"), req("total_scrap>=5"), req("mana>=25")],
    [fact("complex_test_done", true), increase("mana_max_value", 10), gamelog("Complex test completed!")],
    "A complex test showing multiple requirements and outcomes", "Main", 1)

// Button with costs (using existing ButtonCost syntax for now)
quickButton("QuickUpgrade", "Quick Upgrade",
    [req("first_altar_upgrade")],
    [increase("mana_max_value", 30)],
    "Quick upgrade test", "Upgrade", 1,
    [ButtonCost("mana", 50), ButtonCost("rune", 3)])


// ===== AUTO-CLICKER SYSTEM EXAMPLES =====

// Define auto-clickers (these create the available auto-clickers)
createAutoClicker("basic_clicker", "BasicHarvest", 5000.0, [], [])
createAutoClicker("advanced_clicker", "BasicHarvest", 3000.0,
    [ButtonCost("mana", 100)],
    [req("basic_clicker_owned==true")])

// Purchase buttons for auto-clickers
quickButton("buy_basic_autoclicker", "Buy Basic Auto-Clicker",
    [req("mana>=5")],
    [purchaseAutoClicker("basic_clicker"), gamelog("Purchased Basic Auto-Clicker! It will click 'Harvest Altar' every 5 seconds.")],
    "Automatically clicks the Harvest Altar button every 5 seconds",
    "AutoClickers",
    1,
    [ButtonCost("mana", 10)])

quickButton("buy_advanced_autoclicker", "Buy Advanced Auto-Clicker",
    [req("basic_clicker_owned")],
    [purchaseAutoClicker("advanced_clicker"), gamelog("Purchased Advanced Auto-Clicker! Faster clicking power!")],
    "A faster auto-clicker that clicks every 3 seconds",
    "AutoClickers")

// Toggle buttons (enable/disable auto-clickers)
quickButton("toggle_basic_clicker", "Toggle Basic Auto-Clicker",
    [req("basic_clicker_owned")],
    [toggleAutoClicker("basic_clicker"), gamelog("Toggled Basic Auto-Clicker!")],
    "Enable/disable the Basic Auto-Clicker",
    "AutoClickers",
    0)

quickButton("toggle_advanced_clicker", "Toggle Advanced Auto-Clicker",
    [req("advanced_clicker_owned==true")],
    [toggleAutoClicker("advanced_clicker"), gamelog("Toggled Advanced Auto-Clicker!")],
    "Enable/disable the Advanced Auto-Clicker",
    "AutoClickers")

// Upgrade buttons - Global speed boost
quickButton("upgrade_all_autoclickers", "Upgrade All Auto-Clickers",
    [req("mana>=500")],
    [increase("autoclicker_global_multiplier", 0.5), gamelog("All auto-clickers are now 50% faster!")],
    "Increases all auto-clicker speeds by 50%",
    "Upgrades")

quickButton("mega_upgrade_all", "Mega Speed Boost",
    [req("mana>=2000"), req("autoclicker_global_multiplier>=2.0")],
    [fact("autoclicker_global_multiplier", 3.0), gamelog("MEGA BOOST! All auto-clickers tripled speed!")],
    "Sets all auto-clicker speeds to 3x multiplier",
    "Upgrades")

// Individual auto-clicker upgrades
quickButton("upgrade_basic_clicker_speed", "Upgrade Basic Auto-Clicker",
    [req("basic_clicker_owned==true"), req("mana>=100")],
    [increase("autoclicker_multiplier_basic_clicker", 0.5), gamelog("Basic Auto-Clicker upgraded!")],
    "Increases Basic Auto-Clicker speed by 50%",
    "Upgrades")

quickButton("turbo_basic_clicker", "Turbo Basic Auto-Clicker",
    [req("basic_clicker_owned==true"), req("autoclicker_multiplier_basic_clicker>=2.0"), req("scrap>=10")],
    [fact("autoclicker_multiplier_basic_clicker", 5.0), gamelog("Basic Auto-Clicker is now TURBO! 5x speed!")],
    "Sets Basic Auto-Clicker to 5x speed",
    "Upgrades")

// Alternative: Upgrade by changing interval directly
quickButton("optimize_advanced_clicker", "Optimize Advanced Auto-Clicker",
    [req("advanced_clicker_owned==true"), req("rune>=5")],
    [fact("autoclicker_interval_advanced_clicker", 1500.0), gamelog("Advanced Auto-Clicker optimized to 1.5 seconds!")],
    "Reduces Advanced Auto-Clicker interval to 1.5 seconds",
    "Upgrades")

// Example of an auto-clicker for a different button
createAutoClicker("scrapper_clicker", "ScrapCollect", 8000.0,
    [ButtonCost("scrap", 5)],
    [req("scrapper_on==true")])

quickButton("buy_scrapper_autoclicker", "Buy Scrapper Auto-Clicker",
    [req("scrap>=10"), req("scrapper_on==true")],
    [purchaseAutoClicker("scrapper_clicker"), gamelog("Scrapper Auto-Clicker purchased! It will automatically collect scrap.")],
    "Automatically collects scrap every 8 seconds",
    "AutoClickers")

quickButton("toggle_scrapper_clicker", "Toggle Scrapper Auto-Clicker",
    [req("scrapper_clicker_owned==true")],
    [toggleAutoClicker("scrapper_clicker"), gamelog("Toggled Scrapper Auto-Clicker!")],
    "Enable/disable the Scrapper Auto-Clicker",
    "AutoClickers")

